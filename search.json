[{"date":"2021-06-19T12:00:18.183Z","url":"/2021/06/19/Stream%E6%B5%81/","categories":[["undefined",""]],"content":"1.使用传统的方式,遍历集合,对集合中的数据进行过滤 listA=张无忌listA=张强listA=张三丰listB=张无忌listB=张三丰` 1-1.使用Stream流的方式,遍历集合,对集合中的数据进行过滤 结果集： 张无忌张三丰 stream流介绍2.java.util.stream.Stream是Java 8新加入的最常用的流接口。（这并不是一个函数式接口。）获取一个流非常简单，有以下几种常用的方式： 所有的Collection集合都可以通过stream默认方法获取流； default Stream stream() Stream接口的静态方法of可以获取数组对应的流。 static Stream of(T… values) 参数是一个可变参数,那么我们就可以传递一个数组 2-1 ：Stream流中的常用方法_forEach 结果打印： 张三李四王五赵六田七 2-2 ： Stream流中的常用方法_filter:用于对Stream流中的数据进行过滤 Stream流属于管道流,只能被消费(使用)一次， 第一个Stream流调用完毕方法,数据就会流转到下一个Stream上，而这时第一个Stream流已经使用完毕,就会关闭了， 所以第一个Stream流就不能再调用方法了，会抛出异常。 结果打印： 张三丰张翠山张无忌Exception in thread “main” java.lang.IllegalStateException:stream has already been operated upon or closed12345 2-3 ：Stream流中的常用方法_map:用于类型转换 结果打印： 1234 2-4 ：Stream流中的常用方法_count:用于统计Stream流中元素的个数 2-5：Stream流中的常用方法_limit:用于截取流中的元素 结果打印： 特朗普普京奥巴马 2-6：Stream流中的常用方法_skip:用于跳过元素 结果打印： 奥利奥流川枫 2-7：Stream流中的常用方法_concat:用于把流组合到一起如果有两个流，希望合并成为一个流，那么可以使用Stream接口的静态方法concat static Stream concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b) 结果打印： 特朗普普京奥巴马奥利奥流川枫美羊羊喜洋洋懒洋洋灰太狼红太狼 2-8：练习：集合元素处理（Stream方式）现在有两个ArrayList集合存储队伍当中的多个成员姓名，要求使用传统的for循环（或增强for循环）依次进行以下若干操作步骤： 1. 第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。 2. 第一个队伍筛选之后只要前3个人；存储到一个新集合中。 3. 第二个队伍只要姓张的成员姓名；存储到一个新集合中。 4. 第二个队伍筛选之后不要前2个人；存储到一个新集合中。 5. 将两个队伍合并为一个队伍；存储到一个新集合中。 6. 根据姓名创建Person对象；存储到一个新集合中。 7. 打印整个队伍的Person对象信息。 Person对象： ```javapackage com.luer.comm; /** Created by 87961 on 2019/7/18.*/public class Person {private String name;public Person() {}public Person(String name) { }@Overridepublic String toString() { }public String getName() { } public void setName(String name) { } } 结果打印： Person{name=’宋远桥’}Person{name=’苏星河’}Person{name=’石破天’}Person{name=’张天爱’}Person{name=’张二狗’}"},{"title":"Git更新本地项目","date":"2021-06-02T13:27:00.231Z","url":"/2021/06/02/Git%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE/","tags":[["git","/tags/git/"]],"categories":[["Git","/categories/Git/"]],"content":"Git更新本地项目1、（先进入项目文件夹）通过命令 git init 把这个目录变成git可以管理的仓库 2、把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意为添加文件夹下的所有文件 3、用命令 git commit告诉Git，把文件提交到仓库。引号内为提交说明 4、关联到远程库 如： 5、获取远程库与本地同步合并（如果远程库不为空必须做这一步，否则后面的提交会失败） 6、把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。执行此命令后会要求输入用户名、密码，验证通过后即开始上传。 *、状态查询命令 关联 后更新只要执行步骤2、3、5、6。"},{"title":"网络编程初步学习","date":"2021-05-27T13:28:36.530Z","url":"/2021/05/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/","tags":[["Java","/tags/Java/"]],"categories":[["JavaSE","/categories/JavaSE/"]],"content":"第一章 网络编程入门1.1 软件结构 C/S结构：客户端和服务器结构，常见的有：QQ、迅雷等软件 B/S结构：浏览器和服务器结构，常见的有：谷歌、火狐等 1.2网络通信协议 网络通信协议 TCP/IP协议：传输控制协议/因特网互联协议。四层模型（应用层、传输层&lt;TCP、UDP&gt;、网络层、数据链路层和物理层） 1.3协议分类： UDP：用户数据报协议。面向无连接的通信协议，当一台计算机向另一台计算机发送数据时，发送端不会确认接收端是否存在，就会发送数据，同样接收端在收到数据时，也不会向发送端反馈是否接收到数据。 *优点**：消耗资源小，通信效率高，通常用于音频、视频和普通数据的传输。 *缺点**：不能保证数据的完整性，偶尔会丢失少量数据包。&lt;UDP相对于TCP而言，是缺少一个可靠的丢失重发机制，因此可以立即返回，所以你觉得快&gt; TCP：传输控制协议。面向连接的通信协议，传输数据前，先建立逻辑连接，再传输数据，提供了两台计算机间可靠的无差错的数据传输。在TCP连接中必须要明确客户端与服务器，由客户端发送连接请求，每次连接的创建都要经过“三次握手”。保证数据传输安全。 三次握手1、第一次握手：客户端向服务器发送连接请求，等待服务器确认。2、第二次握手：服务器向客户端回送一个响应。通知客户端收到了连接请求。3、第三次握手：客户端再次向服务器发送确认信息，确认连接。 1.4网络编程三要素①协议②IP地址 ipv4 32位的二进制数，通常被分为四个字节，可以表示2^32≈42亿个 ipv6 128位的十六进制数，每16个字节一组，分成8组，可以表示16^128个特殊的IP地址：127.0.0.1、localhost &lt;代表的都是本地的IP地址&gt; ③端口号 是一个逻辑端口，无法直接看到。由两个字节组成，取值范围在0-65535之间 *注意**：1、1024之前的端口号已经不能使用了，被系统分配到已知的网络软件了2、端口号不能重复 使用IP+端口号就能保证数据准确无误地发送到对方计算机的指定软件上了常见的端口号：1、80端口 网络端口 如：www.baidu.com:802、数据库 mysql:3306 oracle:15213、Tomcat服务器：8080 第二章：TCP通信程序2.1概述两端通信步骤：1、服务端程序，需要事先启动，等待客户端的连接2、客户端主动连接服务器端，连接成功才能实现通信。服务端不可以主动连接客户端。 在Java中，提供了两个类来实现TCP通信程序1、客户端：java.net.Socket类表示，创建Socket对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。2、服务端：java.net.ServerSocket 类表示。创建 ServerSocket 对象，相当于开启一个服务，并等待客户端 的连接。 2.2 Socket类Socket 类：该类实现客户端套接字，套接字指的是两台设备之间通讯的端点。 构造方法：public Socket(String host, int port) :创建套接字对象并将其连接到指定主机上的指定端口号。如果指 定的host是null ，则相当于指定地址为回送地址。例如： 成员方法包括：getInputStream、getOutputStream、close、shutdownOutput. 具体实现：客户端类： 服务器类： "},{"title":"文章页面","date":"2021-05-23T18:06:57.000Z","url":"/2021/05/24/%E8%AE%BE%E7%BD%AE%E6%96%87%E7%AB%A0%E9%A1%B5%E9%9D%A2/","tags":[["hexo","/tags/hexo/"]],"categories":[["搭建初期","/categories/%E6%90%AD%E5%BB%BA%E5%88%9D%E6%9C%9F/"]],"content":"文章页面配置路径：顶部，文章信息区 (Front-Matter) pic : 可以指定这篇文章是否使用自定义的缩略图名称（在文章资源文件夹内），而不是使用随机化的图标 sticky : (number)重要的文章，把它们置顶吧！数字越大优先级越高哦~ comments : (true/false)是否为单篇文章指定开启或关闭评论区 toc： (true/false)该文章是否需要生成目录 only： 指定文章显示的位置，有以下关键词： home: 在首页显示 category: 在分类页显示 tag: 在标签页显示 留空或是不配置此项，则文章在所有该出现的位置都会显示。 层级之间相互平等，没有覆盖关系。 特别地，如果配置了此项，但是使用的并不是以上的关键词（例如只留了一个- none，那么文章就被隐藏起来了） 一个完整的 Front-Matter 区样式如下（可自行删去不必要的内容）： 模板与特定页面 书写技巧 文章概要 可以将文章开头的一段作为概要显示在首页主题部分，方法就是在需要分割的地方加入&lt;!-- more --&gt;即可；或者可以在文章头指定excerpt 图片资源 Hexo有为每篇文章生成一个资源文件夹，可以将图片资源以&#123;% asset_img 文件名 备注 %&#125;的格式插入文章，本主题引入的fancybox会自动实现对文章内图片的放大功能。 "},{"title":"使用hexo搭建个人博客","date":"2021-05-21T04:15:57.000Z","url":"/2021/05/21/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","tags":[["hexo","/tags/hexo/"]],"categories":[["搭建初期","/categories/%E6%90%AD%E5%BB%BA%E5%88%9D%E6%9C%9F/"]],"content":"一、使用hexo搭建个人博客初始化过程：&emsp;&emsp;进入hexo使用文档，下载git 和 node.js。&emsp;&emsp;遇到网速慢的情况可以自己配置国内镜像源，更改host文件。 二、使用 hexo -s 启动hexo服务，在本地端口localhost:4000进行效果预览 hexo n &quot;我的第一篇博客文章&quot; 新建一篇自己的博客文章，可以在VScode、typora等其他工具进行撰写语法一般使用markdown，基本语法参考：markdown简明语法 | 不如 (ibruce.info) .md文件一般放在 *\\source\\_posts\\ cd ../.. 完成编写后退回至原目录 hexo clean 进行清理 hexo g 进行生成 hexo d 进行部署 🐚补充：想要部署到通过GitHub的域名访问时repo为自己的仓库1、设置_config.yml文件 2、git config --global -l 设置部署到GitHub的用户名以及邮箱 三、设置主题在Themes | Hexo 中挑选合适的主题通过git克隆到本地的主题文件夹下git clone *** themes/&quot;主题名&quot;更改配置文件_config.yml(指定刚刚下载的主题) 🏆最后clean再部署启动一下就可以啦~ Ending···可以参考一下羊哥的视频：手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 打开弹幕，遇到的绝大多数错误弹幕中都有提到"},{"title":"Hello World","date":"2021-05-20T23:34:42.104Z","url":"/2021/05/21/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]